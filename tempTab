
const TabBar = (props: any) => {
  const viewRefs = useRef([]);
  const blockPositionX = useSharedValue(20);
  const blockPositionY = useSharedValue(14);
  const animateTab = useAnimatedStyle(() => {
    return {
      transform: [
        { translateX: blockPositionX.value },
        { translateY: blockPositionY.value },
      ],
    };
  });
  function onPressInTab(index: number, route: any) {
    const viewRef = viewRefs.current[index];
    if (viewRef) {
      viewRef.measure((x, y, width, height, pageX, pageY) => {
        blockPositionX.value = withTiming(x + 10, { duration: 200 });
      });
    }
    props.navigation.navigate(route);
  }

  const isChatScreen = props.state.routes[props.state.index].name === "message";

  if (isChatScreen) {
    return null;
  }


  return (
    <View
      className="flex flex-row p-3 pb-6 bottom-0 bg-primary"
      style={{
        borderTopLeftRadius: 24,
        borderTopRightRadius: 24,
      }}
    >
      <Animated.View
        style={[animateTab, { height: 40, width: 60 }]}
        className=" absolute bg-white rounded-full -z-10"
      ></Animated.View>
      {props.state.routes.map((route: any, index: number) => {
        return (
          <Pressable
            ref={(ref) => (viewRefs.current[index] = ref)}
            onPressIn={() => onPressInTab(index, route)}
            key={index}
            style={{ height: 40, width: 60 }}
            className={
              props.state.index === index
                ? "flex-1 items-center rounded-full justify-center"
                : "flex-1 items-center justify-center "
            }
          >
            <AntDesign
              color={props.state.index === index ? "#46486B" : "#fff"}
              size={20}
              name={tabData[index].icon.toString()}
            />
          </Pressable>
        );
      })}
    </View>
  );
};